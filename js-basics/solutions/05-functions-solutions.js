// ===========================================
// –†–Ü–®–ï–ù–ù–Ø –ó–ê–í–î–ê–ù–¨ - –£–†–û–ö 5: –§–£–ù–ö–¶–Ü–á
// ===========================================

console.log("=== –ó–ê–í–î–ê–ù–ù–Ø 1: FUNCTION DECLARATION ===");

// –ó–∞–≤–¥–∞–Ω–Ω—è 1.1: –ü—Ä–æ—Å—Ç—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
function greet(name) {
    return `–ü—Ä–∏–≤—ñ—Ç, ${name}!`;
}

function calculateArea(width, height) {
    return width * height;
}

function isEven(number) {
    return number % 2 === 0;
}

// –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è
console.log(greet("–ê–Ω–Ω–∞"));                    // –ü—Ä–∏–≤—ñ—Ç, –ê–Ω–Ω–∞!
console.log(`–ü–ª–æ—â–∞: ${calculateArea(5, 3)} –º¬≤`); // –ü–ª–æ—â–∞: 15 –º¬≤
console.log(`10 –ø–∞—Ä–Ω–µ: ${isEven(10)}`);         // 10 –ø–∞—Ä–Ω–µ: true
console.log(`7 –ø–∞—Ä–Ω–µ: ${isEven(7)}`);           // 7 –ø–∞—Ä–Ω–µ: false

// –ó–∞–≤–¥–∞–Ω–Ω—è 1.2: –§—É–Ω–∫—Ü—ñ—è –∑ –º–Ω–æ–∂–∏–Ω–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
function calculateTotal(price, quantity, taxRate = 0.2) {
    let subtotal = price * quantity;
    let tax = subtotal * taxRate;
    return subtotal + tax;
}

console.log(`\n–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: ${calculateTotal(100, 2)} –≥—Ä–Ω`);      // –∑ –ü–î–í 20%
console.log(`–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: ${calculateTotal(100, 2, 0.1)} –≥—Ä–Ω`);   // –∑ –ü–î–í 10%

console.log("\n=== –ó–ê–í–î–ê–ù–ù–Ø 2: ARROW FUNCTIONS ===");

// –ó–∞–≤–¥–∞–Ω–Ω—è 2.1: –ü—Ä–æ—Å—Ç—ñ —Å—Ç—Ä—ñ–ª–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
const square = (x) => x * x;
const cube = x => x * x * x;  // –º–æ–∂–Ω–∞ –±–µ–∑ –¥—É–∂–æ–∫ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
const add = (a, b) => a + b;

console.log(`5¬≤ = ${square(5)}`);      // 25
console.log(`3¬≥ = ${cube(3)}`);        // 27
console.log(`10 + 7 = ${add(10, 7)}`); // 17

// –ó–∞–≤–¥–∞–Ω–Ω—è 2.2: –°—Ç—Ä—ñ–ª–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∑ –±–ª–æ–∫–æ–º –∫–æ–¥—É
const getGrade = (score) => {
    if (score >= 90) return "A";
    if (score >= 80) return "B";
    if (score >= 70) return "C";
    if (score >= 60) return "D";
    return "F";
};

const formatCurrency = (amount, currency = "UAH") => {
    return `${amount.toFixed(2)} ${currency}`;
};

console.log(`\n–û—Ü—ñ–Ω–∫–∞ 85 –±–∞–ª—ñ–≤: ${getGrade(85)}`);
console.log(`–°—É–º–∞: ${formatCurrency(1234.567)}`);

console.log("\n=== –ó–ê–í–î–ê–ù–ù–Ø 3: –ü–ê–†–ê–ú–ï–¢–†–ò –ó–ê –ó–ê–ú–û–í–ß–£–í–ê–ù–ù–Ø–ú ===");

// –ó–∞–≤–¥–∞–Ω–Ω—è 3.1: –§—É–Ω–∫—Ü—ñ—è –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∑ —á–∞—Å–æ–º
function greetWithTime(name = "–î—Ä—É–∂–µ", timeOfDay = "–¥–µ–Ω—å") {
    return `–î–æ–±—Ä–∏–π ${timeOfDay}, ${name}!`;
}

console.log(greetWithTime());                        // –î–æ–±—Ä–∏–π –¥–µ–Ω—å, –î—Ä—É–∂–µ!
console.log(greetWithTime("–ú–∞—Ä—ñ—è"));                 // –î–æ–±—Ä–∏–π –¥–µ–Ω—å, –ú–∞—Ä—ñ—è!
console.log(greetWithTime("–ü–µ—Ç—Ä–æ", "—Ä–∞–Ω–æ–∫"));        // –î–æ–±—Ä–∏–π —Ä–∞–Ω–æ–∫, –ü–µ—Ç—Ä–æ!

// –ó–∞–≤–¥–∞–Ω–Ω—è 3.2: –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
function createUser(name, age = 18, role = "user", isActive = true) {
    return {
        name: name,
        age: age,
        role: role,
        isActive: isActive,
        createdAt: new Date().toLocaleDateString()
    };
}

console.log("\n–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:");
console.log(createUser("–Ü–≤–∞–Ω"));
console.log(createUser("–ê–Ω–Ω–∞", 25, "admin"));

console.log("\n=== –ó–ê–í–î–ê–ù–ù–Ø 4: CALLBACK –§–£–ù–ö–¶–Ü–á ===");

// –ó–∞–≤–¥–∞–Ω–Ω—è 4.1: –ë–∞–∑–æ–≤—ñ –∫–æ–ª–±–µ–∫–∏
function processNumber(num, callback) {
    console.log(`–û–±—Ä–æ–±–ª—è—î–º–æ —á–∏—Å–ª–æ: ${num}`);
    let result = callback(num);
    console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç: ${result}`);
    return result;
}

// –†—ñ–∑–Ω—ñ –∫–æ–ª–±–µ–∫–∏
const double = x => x * 2;
const makePositive = x => Math.abs(x);
const addTen = x => x + 10;

console.log("–ö–æ–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó:");
processNumber(5, double);        // 10
processNumber(-7, makePositive); // 7
processNumber(15, addTen);       // 25

// –ó–∞–≤–¥–∞–Ω–Ω—è 4.2: –û–±—Ä–æ–±–∫–∞ –º–∞—Å–∏–≤—É –∑ –∫–æ–ª–±–µ–∫–æ–º
function processArray(array, callback) {
    let result = [];
    for (let item of array) {
        result.push(callback(item));
    }
    return result;
}

let numbers = [1, 2, 3, 4, 5];
console.log(`\n–í–∏—Ö—ñ–¥–Ω–∏–π –º–∞—Å–∏–≤: ${numbers}`);
console.log(`–ü–æ–¥–≤–æ—î–Ω—ñ: ${processArray(numbers, x => x * 2)}`);
console.log(`–ö–≤–∞–¥—Ä–∞—Ç–∏: ${processArray(numbers, x => x * x)}`);

console.log("\n=== –ó–ê–í–î–ê–ù–ù–Ø 5: –ó–ê–ú–ò–ö–ê–ù–ù–Ø (CLOSURES) ===");

// –ó–∞–≤–¥–∞–Ω–Ω—è 5.1: –õ—ñ—á–∏–ª—å–Ω–∏–∫ –∑ –∑–∞–º–∏–∫–∞–Ω–Ω—è–º
function createCounter() {
    let count = 0;
    
    return function() {
        count++;
        return count;
    };
}

let counter1 = createCounter();
let counter2 = createCounter();

console.log("–õ—ñ—á–∏–ª—å–Ω–∏–∫–∏:");
console.log(`Counter1: ${counter1()}`); // 1
console.log(`Counter1: ${counter1()}`); // 2
console.log(`Counter2: ${counter2()}`); // 1 (–æ–∫—Ä–µ–º–∏–π –ª—ñ—á–∏–ª—å–Ω–∏–∫)
console.log(`Counter1: ${counter1()}`); // 3

// –ó–∞–≤–¥–∞–Ω–Ω—è 5.2: –§–∞–±—Ä–∏–∫–∞ —Ñ—É–Ω–∫—Ü—ñ–π
function createMultiplier(factor) {
    return function(number) {
        return number * factor;
    };
}

let multiplyBy2 = createMultiplier(2);
let multiplyBy10 = createMultiplier(10);

console.log(`\n5 √ó 2 = ${multiplyBy2(5)}`);   // 10
console.log(`5 √ó 10 = ${multiplyBy10(5)}`);   // 50

// –ó–∞–≤–¥–∞–Ω–Ω—è 5.3: –ü—Ä–∏–≤–∞—Ç–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
function createBankAccount(initialBalance = 0) {
    let balance = initialBalance;
    
    return {
        deposit: function(amount) {
            balance += amount;
            return `–ü–æ–ø–æ–≤–Ω–µ–Ω–æ –Ω–∞ ${amount}. –ë–∞–ª–∞–Ω—Å: ${balance}`;
        },
        withdraw: function(amount) {
            if (amount <= balance) {
                balance -= amount;
                return `–ó–Ω—è—Ç–æ ${amount}. –ë–∞–ª–∞–Ω—Å: ${balance}`;
            } else {
                return "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤";
            }
        },
        getBalance: function() {
            return balance;
        }
    };
}

let account = createBankAccount(100);
console.log("\n–ë–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π —Ä–∞—Ö—É–Ω–æ–∫:");
console.log(account.deposit(50));   // –ü–æ–ø–æ–≤–Ω–µ–Ω–æ –Ω–∞ 50. –ë–∞–ª–∞–Ω—Å: 150
console.log(account.withdraw(30));  // –ó–Ω—è—Ç–æ 30. –ë–∞–ª–∞–Ω—Å: 120
console.log(account.withdraw(200)); // –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤

console.log("\n=== –ó–ê–í–î–ê–ù–ù–Ø 6: –†–ï–ö–£–†–°–Ü–Ø ===");

// –ó–∞–≤–¥–∞–Ω–Ω—è 6.1: –§–∞–∫—Ç–æ—Ä—ñ–∞–ª
function factorial(n) {
    if (n <= 1) return 1;
    return n * factorial(n - 1);
}

console.log(`5! = ${factorial(5)}`); // 120

// –ó–∞–≤–¥–∞–Ω–Ω—è 6.2: –°—É–º–∞ —Ü–∏—Ñ—Ä —á–∏—Å–ª–∞
function sumOfDigits(num) {
    if (num < 10) return num;
    return (num % 10) + sumOfDigits(Math.floor(num / 10));
}

console.log(`–°—É–º–∞ —Ü–∏—Ñ—Ä 1234: ${sumOfDigits(1234)}`); // 10

// –ó–∞–≤–¥–∞–Ω–Ω—è 6.3: –ß–∏—Å–ª–∞ –§—ñ–±–æ–Ω–∞—á—á—ñ
function fibonacci(n) {
    if (n <= 1) return n;
    return fibonacci(n - 1) + fibonacci(n - 2);
}

console.log("–ß–∏—Å–ª–∞ –§—ñ–±–æ–Ω–∞—á—á—ñ:");
for (let i = 0; i < 8; i++) {
    console.log(`F(${i}) = ${fibonacci(i)}`);
}

console.log("\n=== –ó–ê–í–î–ê–ù–ù–Ø 7: –ü–†–ê–ö–¢–ò–ß–ù–ò–ô –ü–†–ò–ö–õ–ê–î ===");

// –ó–∞–≤–¥–∞–Ω–Ω—è 7.1: –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏
function createTaskManager() {
    let tasks = [];
    let nextId = 1;
    
    return {
        addTask: function(title, priority = "medium") {
            let task = {
                id: nextId++,
                title: title,
                priority: priority,
                completed: false,
                createdAt: new Date().toLocaleString()
            };
            tasks.push(task);
            return `–ó–∞–≤–¥–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ: "${title}"`;
        },
        
        completeTask: function(id) {
            let task = tasks.find(t => t.id === id);
            if (task) {
                task.completed = true;
                return `–ó–∞–≤–¥–∞–Ω–Ω—è "${task.title}" –≤–∏–∫–æ–Ω–∞–Ω–æ!`;
            }
            return "–ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ";
        },
        
        getTasks: function(filter = "all") {
            switch(filter) {
                case "completed":
                    return tasks.filter(t => t.completed);
                case "pending":
                    return tasks.filter(t => !t.completed);
                default:
                    return tasks;
            }
        },
        
        getTaskCount: function() {
            let completed = tasks.filter(t => t.completed).length;
            let total = tasks.length;
            return { completed, pending: total - completed, total };
        }
    };
}

// –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–¥–∞–Ω—å
let taskManager = createTaskManager();

console.log("--- –°–ò–°–¢–ï–ú–ê –ó–ê–í–î–ê–ù–¨ ---");
console.log(taskManager.addTask("–í–∏–≤—á–∏—Ç–∏ JavaScript", "high"));
console.log(taskManager.addTask("–ó—Ä–æ–±–∏—Ç–∏ –≤–ø—Ä–∞–≤–∏"));
console.log(taskManager.addTask("–ü—Ä–æ—á–∏—Ç–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é", "low"));

console.log(taskManager.completeTask(1));

let stats = taskManager.getTaskCount();
console.log(`\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${stats.completed} –≤–∏–∫–æ–Ω–∞–Ω–æ, ${stats.pending} –≤ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ`);

console.log("\n–í—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è:");
taskManager.getTasks().forEach(task => {
    let status = task.completed ? "‚úÖ" : "‚ùå";
    console.log(`${status} [${task.priority}] ${task.title}`);
});

// ===========================================
// –ü–û–†–ê–î–ò –©–û–î–û –í–ò–ö–û–ù–ê–ù–ù–Ø:
// ===========================================

/*
üí° –ö–õ–Æ–ß–û–í–Ü –ú–û–ú–ï–ù–¢–ò:

1. FUNCTION DECLARATION vs ARROW FUNCTIONS:
   - function name() {} - –º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –¥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è (hoisting)
   - const name = () => {} - –Ω–µ –º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –¥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
   - Arrow functions –Ω–µ –º–∞—é—Ç—å –≤–ª–∞—Å–Ω–æ–≥–æ 'this'

2. –ü–ê–†–ê–ú–ï–¢–†–ò:
   - function(a, b = 5) - –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
   - function(...args) - rest –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ (–º–∞—Å–∏–≤)
   - function(a, b, c) - —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å

3. –ö–û–õ–ë–ï–ö–ò:
   - –§—É–Ω–∫—Ü—ñ—è —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç —ñ–Ω—à–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
   - –í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó –≤ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –º–æ–º–µ–Ω—Ç
   - –û—Å–Ω–æ–≤–∞ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è

4. –ó–ê–ú–ò–ö–ê–ù–ù–Ø:
   - –§—É–Ω–∫—Ü—ñ—è –º–∞—î –¥–æ—Å—Ç—É–ø –¥–æ –∑–º—ñ–Ω–Ω–∏—Ö –∑–æ–≤–Ω—ñ—à–Ω—å–æ—ó –æ–±–ª–∞—Å—Ç—ñ
   - –î–æ–∑–≤–æ–ª—è—î —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
   - –û—Å–Ω–æ–≤–∞ –¥–ª—è –º–æ–¥—É–ª—å–Ω–∏—Ö –ø–∞—Ç–µ—Ä–Ω—ñ–≤

5. –†–ï–ö–£–†–°–Ü–Ø:
   - –§—É–Ω–∫—Ü—ñ—è –≤–∏–∫–ª–∏–∫–∞—î —Å–∞–º–∞ —Å–µ–±–µ
   - –ü–æ—Ç—Ä—ñ–±–Ω–∞ —É–º–æ–≤–∞ –≤–∏—Ö–æ–¥—É (base case)
   - –ö–æ—Ä–∏—Å–Ω–∞ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –¥–µ—Ä–µ–≤–æ–≤–∏–¥–Ω–∏–º–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏

üö´ –ù–ê–ô–ß–ê–°–¢–Ü–®–Ü –ü–û–ú–ò–õ–ö–ò:
- –ó–∞–±—É–≤–∞–Ω–Ω—è return –≤ —Ñ—É–Ω–∫—Ü—ñ—è—Ö
- –ü–ª—É—Ç–∞–Ω–Ω—è this –≤ arrow functions
- –ë–µ–∑–∫—ñ–Ω–µ—á–Ω–∞ —Ä–µ–∫—É—Ä—Å—ñ—è (–Ω–µ–º–∞—î —É–º–æ–≤–∏ –≤–∏—Ö–æ–¥—É)
- –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑–∞–º–∏–∫–∞–Ω—å

üèÜ –ö–†–ê–©–Ü –ü–†–ê–ö–¢–ò–ö–ò:
- –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –æ–ø–∏—Å–æ–≤—ñ –Ω–∞–∑–≤–∏ —Ñ—É–Ω–∫—Ü—ñ–π
- –û–¥–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è - –æ–¥–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å
- –£–Ω–∏–∫–∞–π –≥–ª–∏–±–æ–∫–æ—ó –≤–∫–ª–∞–¥–µ–Ω–æ—Å—Ç—ñ
- –î–æ–∫—É–º–µ–Ω—Ç—É–π —Å–∫–ª–∞–¥–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∫–æ–º–µ–Ω—Ç–∞—Ä—è–º–∏
- –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π const –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ–π, —â–æ –Ω–µ –ø–µ—Ä–µ–ø—Ä–∏—Å–≤–æ—é—é—Ç—å—Å—è
*/