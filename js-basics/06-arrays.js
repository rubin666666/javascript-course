// ===========================================
// üìö –£–†–û–ö 6: –ú–ê–°–ò–í–ò –í JAVASCRIPT (ARRAYS)
// ===========================================

/*
üìö –©–û –í–ò–í–ß–ò–ú–û –í –¶–¨–û–ú–£ –£–†–û–¶–Ü:
- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞—Å–∏–≤—ñ–≤ —Ä—ñ–∑–Ω–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
- –î–æ—Å—Ç—É–ø –¥–æ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —Ç–∞ –∑–º—ñ–Ω–∞ —ó—Ö –∑–Ω–∞—á–µ–Ω—å
- –ú–µ—Ç–æ–¥–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
- –ú–µ—Ç–æ–¥–∏ –ø–æ—à—É–∫—É —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
- –ü–æ—Ç—É–∂–Ω—ñ –º–µ—Ç–æ–¥–∏ –æ–±—Ä–æ–±–∫–∏: map, filter, reduce
- –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ —ñ–Ω—à—ñ –∫–æ—Ä–∏—Å–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó
- –ë–∞–≥–∞—Ç–æ–≤–∏–º—ñ—Ä–Ω—ñ –º–∞—Å–∏–≤–∏
- –ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
*/

console.log("=== üì¶ –°–¢–í–û–†–ï–ù–ù–Ø –ú–ê–°–ò–í–Ü–í ===");

// üìñ –ú–ê–°–ò–í - —Ü–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —É–ø–æ—Ä—è–¥–∫–æ–≤–∞–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
// –Ü–Ω–¥–µ–∫—Å–∏ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ 0: [–µ–ª–µ–º–µ–Ω—Ç0, –µ–ª–µ–º–µ–Ω—Ç1, –µ–ª–µ–º–µ–Ω—Ç2, ...]

// üçé –°–ø–æ—Å—ñ–± 1: –õ—ñ—Ç–µ—Ä–∞–ª—å–Ω–∞ –Ω–æ—Ç–∞—Ü—ñ—è (–Ω–∞–π–ø–æ—à–∏—Ä–µ–Ω—ñ—à–∏–π)
let fruitBasket = ["üçé —è–±–ª—É–∫–æ", "üçå –±–∞–Ω–∞–Ω", "üçä –∞–ø–µ–ª—å—Å–∏–Ω"];
console.log("üß∫ –§—Ä—É–∫—Ç–∏:", fruitBasket);

// üî¢ –°–ø–æ—Å—ñ–± 2: –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä Array
let digitSequence = new Array(1, 2, 3, 4, 5);
console.log("üî¢ –ß–∏—Å–ª–∞:", digitSequence);

// üé≠ –°–ø–æ—Å—ñ–± 3: –ó–º—ñ—à–∞–Ω–∏–π –º–∞—Å–∏–≤ (—Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –¥–∞–Ω–∏—Ö)
let mixedCollection = [
    42,                    // —á–∏—Å–ª–æ
    "JavaScript",          // —Ä—è–¥–æ–∫
    true,                  // boolean
    null,                  // null
    {name: "–æ–±'—î–∫—Ç"},      // –æ–±'—î–∫—Ç
    [1, 2, 3]             // –≤–∫–ª–∞–¥–µ–Ω–∏–π –º–∞—Å–∏–≤
];
console.log("üé≠ –ó–º—ñ—à–∞–Ω–∏–π:", mixedCollection);

// üìã –°–ø–æ—Å—ñ–± 4: –ü–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤
let emptyContainer = [];
console.log("üìã –ü–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤ –¥–æ–≤–∂–∏–Ω–æ—é:", emptyContainer.length);

// üéØ –ö–û–†–ò–°–ù–Ü –§–ê–ö–¢–ò:
console.log("üí° –î–æ–≤–∂–∏–Ω–∞ fruitBasket:", fruitBasket.length);
console.log("üí° –¢–∏–ø –¥–∞–Ω–∏—Ö –º–∞—Å–∏–≤—É:", typeof fruitBasket);
console.log("üí° –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü–µ –º–∞—Å–∏–≤:", Array.isArray(fruitBasket));

console.log("\n=== üéØ –î–û–°–¢–£–ü –î–û –ï–õ–ï–ú–ï–ù–¢–Ü–í ===");

let colorPalette = ["üî¥ —á–µ—Ä–≤–æ–Ω–∏–π", "üü¢ –∑–µ–ª–µ–Ω–∏–π", "üîµ —Å–∏–Ω—ñ–π", "üü° –∂–æ–≤—Ç–∏–π"];

// üìç –î–æ—Å—Ç—É–ø –∑–∞ —ñ–Ω–¥–µ–∫—Å–æ–º (–ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ 0)
console.log("ü•á –ü–µ—Ä—à–∏–π –∫–æ–ª—ñ—Ä:", colorPalette[0]);
console.log("ü•à –î—Ä—É–≥–∏–π –∫–æ–ª—ñ—Ä:", colorPalette[1]);
console.log("üèÜ –û—Å—Ç–∞–Ω–Ω—ñ–π –∫–æ–ª—ñ—Ä:", colorPalette[colorPalette.length - 1]);
console.log("üìè –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–ª—å–æ—Ä—ñ–≤:", colorPalette.length);

// ‚úèÔ∏è –ó–º—ñ–Ω–∞ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
console.log("\n‚úèÔ∏è –ó–º—ñ–Ω—é—î–º–æ –¥—Ä—É–≥–∏–π –∫–æ–ª—ñ—Ä:");
console.log("–î–æ –∑–º—ñ–Ω–∏:", colorPalette[1]);
colorPalette[1] = "üü£ —Ñ—ñ–æ–ª–µ—Ç–æ–≤–∏–π";
console.log("–ü—ñ—Å–ª—è –∑–º—ñ–Ω–∏:", colorPalette[1]);
console.log("üé® –û–Ω–æ–≤–ª–µ–Ω–∏–π –º–∞—Å–∏–≤:", colorPalette);

console.log("\n=== ‚ûï‚ûñ –ú–ï–¢–û–î–ò –î–û–î–ê–í–ê–ù–ù–Ø/–í–ò–î–ê–õ–ï–ù–ù–Ø ===");

let petZoo = ["üê± –∫—ñ—Ç", "üê∂ —Å–æ–±–∞–∫–∞"];
console.log("üè† –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –∑–æ–æ–ø–∞—Ä–∫:", petZoo);

// ‚ûï push() - –¥–æ–¥–∞—î –≤ –ö–Ü–ù–ï–¶–¨ –º–∞—Å–∏–≤—É
petZoo.push("üêπ —Ö–æ–º'—è–∫");
console.log("‚ûï –ü—ñ—Å–ª—è push():", petZoo);

// ‚ûï unshift() - –¥–æ–¥–∞—î –Ω–∞ –ü–û–ß–ê–¢–û–ö –º–∞—Å–∏–≤—É  
petZoo.unshift("ü¶ú –ø–∞–ø—É–≥–∞");
console.log("‚¨ÜÔ∏è –ü—ñ—Å–ª—è unshift():", petZoo);

// ‚ûñ pop() - –≤–∏–¥–∞–ª—è—î –û–°–¢–ê–ù–ù–Ü–ô –µ–ª–µ–º–µ–Ω—Ç
let removedPet = petZoo.pop();
console.log("üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ pop():", removedPet);
console.log("üìã –ü—ñ—Å–ª—è pop():", petZoo);

// ‚ûñ shift() - –≤–∏–¥–∞–ª—è—î –ü–ï–†–®–ò–ô –µ–ª–µ–º–µ–Ω—Ç
let firstPet = petZoo.shift();
console.log("üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ shift():", firstPet);
console.log("üìã –§—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω:", petZoo);

// üí° –ó–ê–ü–ê–ú'–Ø–¢–ê–ô: push/pop –ø—Ä–∞—Ü—é—é—Ç—å –∑ –∫—ñ–Ω—Ü–µ–º, unshift/shift –∑ –ø–æ—á–∞—Ç–∫–æ–º

console.log("\n=== –ú–ï–¢–û–î–ò –ü–û–®–£–ö–£ ===");

let cities = ["–ö–∏—ó–≤", "–õ—å–≤—ñ–≤", "–û–¥–µ—Å–∞", "–•–∞—Ä–∫—ñ–≤", "–î–Ω—ñ–ø—Ä–æ"];

// indexOf - —ñ–Ω–¥–µ–∫—Å –ø–µ—Ä—à–æ–≥–æ –≤—Ö–æ–¥–∂–µ–Ω–Ω—è
console.log("–Ü–Ω–¥–µ–∫—Å '–û–¥–µ—Å–∞':", cities.indexOf("–û–¥–µ—Å–∞"));
console.log("–Ü–Ω–¥–µ–∫—Å '–ó–∞–ø–æ—Ä—ñ–∂–∂—è':", cities.indexOf("–ó–∞–ø–æ—Ä—ñ–∂–∂—è")); // -1 —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ

// includes - —á–∏ –º—ñ—Å—Ç–∏—Ç—å –µ–ª–µ–º–µ–Ω—Ç
console.log("–ß–∏ —î '–õ—å–≤—ñ–≤':", cities.includes("–õ—å–≤—ñ–≤"));
console.log("–ß–∏ —î '–õ—É—Ü—å–∫':", cities.includes("–õ—É—Ü—å–∫"));

// find - –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç –∑–∞ —É–º–æ–≤–æ—é
let longCityName = cities.find(city => city.length > 5);
console.log("–ü–µ—Ä—à–µ –º—ñ—Å—Ç–æ –∑ –Ω–∞–∑–≤–æ—é > 5 —Å–∏–º–≤–æ–ª—ñ–≤:", longCityName);

// findIndex - —ñ–Ω–¥–µ–∫—Å –ø–µ—Ä—à–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –∑–∞ —É–º–æ–≤–æ—é
let longCityIndex = cities.findIndex(city => city.length > 5);
console.log("–Ü–Ω–¥–µ–∫—Å –ø–µ—Ä—à–æ–≥–æ –º—ñ—Å—Ç–∞ –∑ –Ω–∞–∑–≤–æ—é > 5 —Å–∏–º–≤–æ–ª—ñ–≤:", longCityIndex);

console.log("\n=== –ú–ï–¢–û–î–ò –ü–ï–†–ï–¢–í–û–†–ï–ù–ù–Ø ===");

let nums = [1, 2, 3, 4, 5];

// map - —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –∑ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–∏–º–∏ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏
let doubled = nums.map(num => num * 2);
let squares = nums.map(num => num * num);

console.log("–û—Ä–∏–≥—ñ–Ω–∞–ª:", nums);
console.log("–ü–æ–¥–≤–æ—î–Ω—ñ:", doubled);
console.log("–£ –∫–≤–∞–¥—Ä–∞—Ç—ñ:", squares);

// filter - —Ñ—ñ–ª—å—Ç—Ä—É—î –µ–ª–µ–º–µ–Ω—Ç–∏ –∑–∞ —É–º–æ–≤–æ—é
let evenNumbers = nums.filter(num => num % 2 === 0);
let bigNumbers = nums.filter(num => num > 3);

console.log("–ü–∞—Ä–Ω—ñ —á–∏—Å–ª–∞:", evenNumbers);
console.log("–ß–∏—Å–ª–∞ > 3:", bigNumbers);

// reduce - –∑–≤–æ–¥–∏—Ç—å –º–∞—Å–∏–≤ –¥–æ –æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è
let sum = nums.reduce((total, num) => total + num, 0);
let product = nums.reduce((total, num) => total * num, 1);

console.log("–°—É–º–∞:", sum);
console.log("–î–æ–±—É—Ç–æ–∫:", product);

console.log("\n=== –ú–ï–¢–û–î–ò –°–û–†–¢–£–í–ê–ù–ù–Ø ===");

let randomNumbers = [64, 34, 25, 12, 22, 11, 90];
let names = ["–ê–Ω–Ω–∞", "–í–∞—Å–∏–ª—å", "–ë–æ–≥–¥–∞–Ω", "–î–∞—Ä–∏–Ω–∞"];

// sort - —Å–æ—Ä—Ç—É—î –º–∞—Å–∏–≤ (–∑–º—ñ–Ω—é—î –æ—Ä–∏–≥—ñ–Ω–∞–ª!)
console.log("–î–æ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è:", [...randomNumbers]); // –ö–æ–ø—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É

randomNumbers.sort((a, b) => a - b); // –ó–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º
console.log("–ó–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º:", randomNumbers);

randomNumbers.sort((a, b) => b - a); // –ó–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º
console.log("–ó–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º:", randomNumbers);

names.sort(); // –ê–ª—Ñ–∞–≤—ñ—Ç–Ω–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
console.log("–Ü–º–µ–Ω–∞ –∑–∞ –∞–ª—Ñ–∞–≤—ñ—Ç–æ–º:", names);

// reverse - –æ–±–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤
let reversedNames = [...names].reverse();
console.log("–Ü–º–µ–Ω–∞ —É –∑–≤–æ—Ä–æ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É:", reversedNames);

console.log("\n=== –Ü–ù–®–Ü –ö–û–†–ò–°–ù–Ü –ú–ï–¢–û–î–ò ===");

let testNumbers = [1, 2, 3, 4, 5, 6];

// every - —á–∏ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å —É–º–æ–≤—ñ
let allPositive = testNumbers.every(num => num > 0);
console.log("–í—Å—ñ —á–∏—Å–ª–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω—ñ:", allPositive);

// some - —á–∏ —Ö–æ—á–∞ –± –æ–¥–∏–Ω –µ–ª–µ–º–µ–Ω—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —É–º–æ–≤—ñ
let hasEven = testNumbers.some(num => num % 2 === 0);
console.log("–Ñ –ø–∞—Ä–Ω—ñ —á–∏—Å–ª–∞:", hasEven);

// slice - –∫–æ–ø—ñ—é—î —á–∞—Å—Ç–∏–Ω—É –º–∞—Å–∏–≤—É
let firstThree = testNumbers.slice(0, 3);
let lastTwo = testNumbers.slice(-2);
console.log("–ü–µ—Ä—à—ñ 3:", firstThree);
console.log("–û—Å—Ç–∞–Ω–Ω—ñ 2:", lastTwo);

// splice - –≤–∏–¥–∞–ª—è—î/–¥–æ–¥–∞—î –µ–ª–µ–º–µ–Ω—Ç–∏ (–∑–º—ñ–Ω—é—î –æ—Ä–∏–≥—ñ–Ω–∞–ª!)
let spliceTest = [1, 2, 3, 4, 5];
let removed = spliceTest.splice(2, 2, "a", "b"); // –ó —ñ–Ω–¥–µ–∫—Å—É 2, –≤–∏–¥–∞–ª–∏—Ç–∏ 2, –¥–æ–¥–∞—Ç–∏ "a", "b"
console.log("–í–∏–¥–∞–ª–µ–Ω—ñ:", removed);
console.log("–ü—ñ—Å–ª—è splice:", spliceTest);

// join - –æ–±'—î–¥–Ω—É—î –µ–ª–µ–º–µ–Ω—Ç–∏ –≤ —Ä—è–¥–æ–∫
let joined = colors.join(" - ");
console.log("–û–±'—î–¥–Ω–∞–Ω—ñ –∫–æ–ª—å–æ—Ä–∏:", joined);

console.log("\n=== –ë–ê–ì–ê–¢–û–í–ò–ú–Ü–†–ù–Ü –ú–ê–°–ò–í–ò ===");

let matrix = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
];

console.log("–ú–∞—Ç—Ä–∏—Ü—è:");
for (let i = 0; i < matrix.length; i++) {
    console.log(matrix[i]);
}

console.log("–ï–ª–µ–º–µ–Ω—Ç [1][2]:", matrix[1][2]); // 6

console.log("\n=== –ü–†–ê–ö–¢–ò–ß–ù–Ü –ü–†–ò–ö–õ–ê–î–ò ===");

// –ü—Ä–∏–∫–ª–∞–¥ 1: –†–æ–±–æ—Ç–∞ –∑ –º–∞—Å–∏–≤–æ–º –æ–±'—î–∫—Ç—ñ–≤
let students = [
    {name: "–û–ª–µ–Ω–∞", grade: 85, subject: "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"},
    {name: "–ú–∞–∫—Å–∏–º", grade: 92, subject: "–§—ñ–∑–∏–∫–∞"},
    {name: "–°–æ—Ñ—ñ—è", grade: 78, subject: "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"},
    {name: "–î–∞–Ω–∏–ª–æ", grade: 88, subject: "–•—ñ–º—ñ—è"}
];

// –ó–Ω–∞–π—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –∑ –æ—Ü—ñ–Ω–∫–æ—é > 80
let goodStudents = students.filter(student => student.grade > 80);
console.log("–°—Ç—É–¥–µ–Ω—Ç–∏ –∑ –æ—Ü—ñ–Ω–∫–æ—é > 80:", goodStudents);

// –°–µ—Ä–µ–¥–Ω—è –æ—Ü—ñ–Ω–∫–∞
let averageGrade = students.reduce((sum, student) => sum + student.grade, 0) / students.length;
console.log("–°–µ—Ä–µ–¥–Ω—è –æ—Ü—ñ–Ω–∫–∞:", averageGrade.toFixed(2));

// –ü—Ä–∏–∫–ª–∞–¥ 2: –£–Ω—ñ–∫–∞–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
let numbersWithDuplicates = [1, 2, 2, 3, 3, 3, 4, 5, 5];
let uniqueNumbers = [...new Set(numbersWithDuplicates)];
console.log("–ó –¥—É–±–ª—ñ–∫–∞—Ç–∞–º–∏:", numbersWithDuplicates);
console.log("–£–Ω—ñ–∫–∞–ª—å–Ω—ñ:", uniqueNumbers);

// –ü—Ä–∏–∫–ª–∞–¥ 3: –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
let products = [
    {name: "–•–ª—ñ–±", category: "–í–∏–ø—ñ—á–∫–∞", price: 25},
    {name: "–ú–æ–ª–æ–∫–æ", category: "–ú–æ–ª–æ—á–Ω—ñ", price: 35},
    {name: "–ë—É–ª–æ—á–∫–∞", category: "–í–∏–ø—ñ—á–∫–∞", price: 15},
    {name: "–°–∏—Ä", category: "–ú–æ–ª–æ—á–Ω—ñ", price: 120}
];

let groupedByCategory = products.reduce((groups, product) => {
    if (!groups[product.category]) {
        groups[product.category] = [];
    }
    groups[product.category].push(product);
    return groups;
}, {});

console.log("–ó–≥—Ä—É–ø–æ–≤–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏:", groupedByCategory);

// –ü—Ä–∏–∫–ª–∞–¥ 4: –ü–æ—à—É–∫ –Ω–∞–π–¥–æ—Ä–æ–∂—á–æ–≥–æ —Ç–æ–≤–∞—Ä—É
let mostExpensive = products.reduce((max, product) => 
    product.price > max.price ? product : max
);
console.log("–ù–∞–π–¥–æ—Ä–æ–∂—á–∏–π —Ç–æ–≤–∞—Ä:", mostExpensive);

// üõ†Ô∏è –ü–†–ò–ö–õ–ê–î 5: –†–æ–∑—à–∏—Ä–µ–Ω–Ω—è –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –º–∞—Å–∏–≤—ñ–≤
console.log("\nüõ†Ô∏è –°—Ç–≤–æ—Ä—é—î–º–æ –≤–ª–∞—Å–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –º–∞—Å–∏–≤—ñ–≤:");

// –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –º–µ—Ç–æ–¥ –¥–æ –≤—Å—ñ—Ö –º–∞—Å–∏–≤—ñ–≤
Array.prototype.filterBy = function(property, value) {
    return this.filter(item => item[property] === value);
};

let bakeryItems = products.filterBy('category', '–í–∏–ø—ñ—á–∫–∞');
console.log("ü•ñ –í–∏–ø—ñ—á–∫–∞ —á–µ—Ä–µ–∑ –≤–ª–∞—Å–Ω–∏–π –º–µ—Ç–æ–¥:", bakeryItems);

// üèÅ –ü–Ü–î–°–£–ú–û–ö –£–†–û–ö–£
console.log("\n=== üìö –ü–Ü–î–°–£–ú–û–ö –£–†–û–ö–£ 6 ===");
console.log("‚úÖ –ù–∞–≤—á–∏–ª–∏—Å—è —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –º–∞—Å–∏–≤–∏ —Ä—ñ–∑–Ω–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏");
console.log("‚úÖ –û–ø–∞–Ω—É–≤–∞–ª–∏ –¥–æ—Å—Ç—É–ø –¥–æ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —Ç–∞ —ó—Ö –∑–º—ñ–Ω—É");
console.log("‚úÖ –í–∏–≤—á–∏–ª–∏ –º–µ—Ç–æ–¥–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è/–≤–∏–¥–∞–ª–µ–Ω–Ω—è: push, pop, shift, unshift");
console.log("‚úÖ –†–æ–∑—ñ–±—Ä–∞–ª–∏ –º–µ—Ç–æ–¥–∏ –ø–æ—à—É–∫—É: indexOf, includes, find, findIndex");
console.log("‚úÖ –ó–∞—Å–≤–æ—ó–ª–∏ –ø–æ—Ç—É–∂–Ω—ñ –º–µ—Ç–æ–¥–∏ –æ–±—Ä–æ–±–∫–∏: map, filter, reduce");
console.log("‚úÖ –ü–æ–ø—Ä–∞–∫—Ç–∏–∫—É–≤–∞–ª–∏—Å—è –∑ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è–º —Ç–∞ —ñ–Ω—à–∏–º–∏ –æ–ø–µ—Ä–∞—Ü—ñ—è–º–∏");
console.log("‚úÖ –ù–∞–≤—á–∏–ª–∏—Å—è –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ –±–∞–≥–∞—Ç–æ–≤–∏–º—ñ—Ä–Ω–∏–º–∏ –º–∞—Å–∏–≤–∞–º–∏");
console.log("‚úÖ –í–∏—Ä—ñ—à–∏–ª–∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ñ –∑–∞–¥–∞—á—ñ –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏");
console.log("üéØ –ù–∞—Å—Ç—É–ø–Ω–∏–π –∫—Ä–æ–∫: –æ–±'—î–∫—Ç–∏ - —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å–∫–ª–∞–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö!");